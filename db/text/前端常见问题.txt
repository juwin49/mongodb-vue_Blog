  简历刚写好就匆匆跑去面试了，被问的有点懵逼，嗯，如果我是面试官也不会招我，白瞎了其中一个还挺适合我的公司，
  我就是太久没玩这玩意了，总结了下问题，前端不就这点东西么，我就不信了，看下次还能问出个花，哼！
  
    * html5居中自定义
    文本居中 text-align:center；
    块居中：margin：auto；
    垂直居中：vertical-align:middle
 
	 
  * 文本居中
  .vertical { 
      height: 100px; 
      line-height: 100px;/*值等于元素高度的值*/ 
    }
	
  * html5浏览器的支持情况
    IE9，chrome，firefox 4，opera，safari 5
  * html5在浏览器上的兼容问题
    IE7 json3.js  ；IE 8 html5shiv.js;  jQuery1.7开始可增加了对HTML5标签的兼容性处理
  * html5与html4结构上的区别
   <!DOCTYPE html>
   
   *html5新特性
  1、HTML5 新元素<article>、<aside>、<command>、<details>、<dialog>、<summary>、<mark>、<nav>、<progress>...
  2.HTML5 Canvas <canvas id="myCanvas"></canvas>
     <script>
       var c=document.getElementById("myCanvas");
       var ctx=c.getContext("2d");
       ctx.fillStyle="#FF0000";
       ctx.fillRect(0,0,150,75);
     </script>
  3.HTML5 拖放<img draggable="true">
  4.HTML5 地理定位 HTML5 Geolocation API 用于获得用户的地理位置。鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。
  5.HTML5  Audio(音频)、Video(视频)
     <audio controls>
       <source src="horse.ogg" type="audio/ogg">
        <source src="horse.mp3" type="audio/mpeg">
		<source src="movie.mp4" type="video/mp4">
        <source src="movie.ogg" type="video/ogg">
     </audio>
  6.HTML5 Input 类型color、date、datetime、datetime-local、email、month、number、range、search、tel、time、url、week
  7.HTML5 表单元素<datalist>;<keygen>;<output>
  8.HTML5 表单属性
  <form>新属性：autocomplete、novalidate
  <input>新属性：autocomplete、autofocus、form、formaction、formenctype、formmethod、formnovalidate、formtarget、height and width、list、min and max、multiple、pattern (regexp)、placeholder、required、step
  9.HTML5 语义元素<header>;<nav>;<section>;<article>;<aside>;<figcaption>;<figure>;<footer>
  10.HTML5 Web 存储
    sessionStorage―客户端数据存储，只能维持在当前会话范围内。
             sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。
    localStorage―客户端数据存储，能维持在多个会话范围内。
             localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。
    对于大量复杂数据结构，一般使用IndexDB
  11.HTML5 离线Web应用（应用程序缓存）
  12.HTML5 Web Workers
  13.HTML5 SSE
  14.HTML5 WebSocket
     
  * css哪些属性可以继承，举例
  不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。
所有元素可继承：visibility和cursor。
内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。
终端块状元素可继承：text-indent和text-align。
列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。

  * padding与margin区别
    margin外部
	padding内部

  * css 绝对定位与相对定位
    position:relative参照物
	position:absolute
  
  * css 调用有几种方式，区别
  1，内部引用，在html文档中在<style>标签里面写的css样式
   <style>
      body{font-size:14px;} 
    </style>
  2，外部引用，用<link>标签引用外部的css文件，将样式引用到html文档来。
    <link rel="stylesheet" type="text/css" href="style.css">
  3，在标签中使用，使用style属性将当前的标签样式改变。
    <div style="color:red"></div>
  

	
  * 内容多余部分变成省略号...
     #test{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;width:20px;}
     上面的样式会将id为test的元素超出20像素之外的文字隐藏，并替换为三个英文半角的句号...
     text-overflow主要支持2个值：ellipsis为显示省略号，clip为修剪文本，是默认值。
     white-space:nowrap;的作用是不让元素中的内容折行，在一行显示。
     overflow:hidden;为溢出隐藏，目的是超过元素宽高的部分不再显示。
     width:20px;设置了元素的宽度，内容超出这个宽度后会显示省略号。
  
  
  * css3兼容性问题
  * 浏览器兼容性问题，解决举例
  Internet Explorer 8为止，IE系列是不支持CSS3的。在IE中要做一些常用的效果如圆角、阴影，

*css3新特性
  1、边框（Borders）用CSS3，你可以创建圆角边框，添加阴影框，并作为边界的形象而不使用设计程序border-image、border-radius、box-shadow
  2、CSS3中包含几个新的背景属性，提供更大背景元素控制。background-clip、background-origin、background-size
  3、CSS3 定义了两种类型的渐变（gradients）：background: linear-gradient(direction, color-stop1, color-stop2, ...);   background: radial-gradient(center, shape size, start-color, ..., last-color);
  4、文本效果：hanging-punctuation;punctuation-trim;text-align-last;text-emphasis;text-justify;text-outline;text-overflow;text-shadow;text-wrap;word-break;word-wrap
  5、CSS3 字体@font-face{font-family: myFirstFont;
                          src: url(sansation_light.woff);}
  6、CSS3 转换和变形 transform;perspective;translate(x,y);scale(x,y);rotate(angle)
  7、CSS3 过渡 transition
  8、CSS3 动画@keyframes ;animation;animation-duration;animation-delay...
  9、CSS3 多列column-count...
  10、CSS3 盒模型resize，box-sizing，outline
  11、CSS3伸缩布局盒模型(弹性盒)display;flex-direction;justify-content;align-items;align-content;flex-wrap...
  12、CSS3 多媒体查询@media
  

	
  * 响应式布局要怎么弄的   
    用css3的@media query
	Flex布局
	使用Bootstrap、layui、kube...


	
  * Javascript 基础、JS面向对象实现原理、闭包机制、作用域
  （太丰富了，写不完，自由发挥）
  
  * 闭包是什么，有什么特性，对页面有什么影响，闭包，举例
      闭包就是能够读取其他函数内部变量的函数。
      http://blog.csdn.net/gaoshanwudi/article/details/7355794 此链接可查看（三星问题）
	  举例：var quo = function(status){
	            return {get_status:function(){return status;}}
	        }
	另一不错的解释https://www.cnblogs.com/mrzl/p/4432323.html
    学术说法：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。（你能看懂吗？反正我不能）
    专业说法：函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内。（这个你懂吗？我略懂）
    通俗说法：所有JavaScript函数都是闭包,因为函数都是对象，都关联到作用域，并且变量都保存在函数作用域内。（这个有点扯，困惑我的闭包，就这么简单）
但是我们通常说的闭包是当一个函数嵌套另一个函数，外部函数将嵌套函数对象作为返回值返回的时候，我们把这种情况称为闭包。
      function func() {
            var num = 0;            //声明局部变量：num
            function f() {          //嵌套函数，在作用域里
                console.log(++num)
            }
            return f();             //调用嵌套函数f,并将f的执行结果返回
        }
        func();                     //输出：1
		
		
		
* for 与foreach 的区别
    foreach其实是for的简化版（从写法上，foreach不用去管被循环体的长度等，直接暴力遍历。但是foreach是只能做循环遍历的，不能对遍历结果进行更改）
    for可以中断，foreach不能中断
	

* js强制转换与弱转换
强制转换：转换为数值类型：Number(mix)、parseInt(string,radix)、parseFloat(string)
                转换为字符串类型：toString(radix)、String(mix)
                转换为布尔类型：Boolean(mix)
弱转换：isNaN(mix)；递增递减操作符；加法运算操作符；乘除、减号运算符、取模运算符； 
             逻辑操作符（!、&&、||） 逻辑非（！）；关系操作符（<, >, ?, >=） ；相等操作符（==）


* 图片滚动懒加载实现步骤
  滚动加载 windows scoll滚动监听,当滑动到最下面时,触发加载动作,向后台发起ajax请求,同时记录当前页数
  懒加载 主要利用的原理就是先不给设置src，而是把图片的路径放在data-src中，等待图片被加载的时候将路径取出放到src中。判断元素是否在可视区域。

	
  * html，js加载及渲染顺序
    肯定先渲染html
	html遇到script，才会加载js
	但是script最好不要放在head标签中,要等js加载完，html才可以继续往下渲染
    不过html5，script标签好像可以设置异步加载了
	
  * 网站优化的问题 （加快网站加载速度，网站运行速度，SEO）
    压缩方面肯定要的
    资源合并
	缓存:localstorage; html页面 <meta http-equiv="expires" content="Sunday 26 October 2008 01:00 GMT" />
	                   http://kinglyhum.iteye.com/blog/827807
	部分内容延缓加载	
    css sprite 图	
					
  * 前端与后端的数据交互方式
    ajax，websocket，http

	
  * 前端跨域的问题要怎么解决
    1、最简单也最常见：使用jsonp ，即json with padding（内填充），顾名思义，就是把JSON填充到一个盒子里
       核心思想：浏览器的script、img、iframe标签是不受同源策略限制的 ，所以通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的callback函数，并把把我们需要的json数据作为参数传入。在服务器端，当req.params参数中带有callback属性时，则把数据作为callback的参数执行，并拼接成一个字符串后返回。 
       - 优点：兼容性好，在很古老的浏览器中也可以用，简单易用，支持浏览器与服务器双向通信。 
       - 缺点：只支持GET请求，且只支持跨域HTTP请求这种情况（不支持HTTPS）
	2、一劳永逸：直接在服务器端设置跨域资源访问 CORS（Cross-Origin Resource Sharing），设置Request Header头中Access-Control-Allow-Origin为指定可获取数据的域名
       核心思想：在服务器端通过检查请求头部的origin，从而决定请求应该成功还是失败。具体的方法是在服务端设置Response Header响应头中的Access-Control-Allow-Origin为对应的域名，实现了CORS（跨域资源共享），这里出于在安全性方面的考虑就是尽量不要用 *，但对于一些不重要的数据则随意，例如图片。
	3、简单有效：直接请求一张图片
	   因为在浏览器中，JS脚本和图片是可以跨域的，所以我们可以直接新建一个图片对象，然后在地址中存放一些简单，这种方法只支持get秦秋，且只能单向地向服务器发送请求，在统计广告曝光次数中比较常见。 
    4、找”爸爸”：通过修改document.domain来跨子域
	   对于以下的这两个域名，可以看到他们的主域名都是 example.com，相同于有一个共同的爸爸，且此方法只适用于两个iframe之间的跨域。
    5、哥俩好：通过window.name来跨域接收数据
	    window对象中其实包含了黑魔法的，window.name属性就是其中之一，不同域的框架把想要共享的信息放在window.name里面，且此方法只适用于两个iframe之间的跨域。
    6、新石器时代：使用HTML5的window.postMessage方法跨域
	    window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。这种方法不能和服务端交换数据，只能在两个窗口（iframe）之间交换数据 
  

 

  *jq中ajax,get,post用法
    $.ajax({name:value, name:value, ... })
      name包括async，url，type，success(result,status,xhr)，error(xhr,status,error)，data，username，password，
              timeout，beforeSend(xhr)，jsonp，jsonpCallback，xhr......
    $.get(URL,data,function(data,status,xhr),dataType)
    $(selector).post(URL,data,function(data,status,xhr),dataType)
	
	
  * ajax请求的时候get 和post方式的区别
     一个在url后面 一个放在虚拟载体里面
     有大小限制
     安全问题
     应用不同 一个是论坛等只需要请求的，一个是类似修改密码的



  * ajax请求时，如何解释json数据
    使用eval parse 鉴于安全性考虑 使用parse更靠谱
	
	
  * 解释jsonp的原理，以及为什么不是真正的ajax,举例：
     动态创建script标签，回调函数
     Ajax是页面无刷新请求数据操作
	 
  * 前端页面有哪三层构成，分别是什么?作用是什么?
     结构层 Html 表示层 CSS 行为层 js
  
  
  * 移动端与PC端的区别
     分辨率
	 webkit内核的浏览器和chrome，uc，qq，小米手机浏览器
	 鼠标，键盘的交互变成了触摸以及手势的交互
	 与Native App互动
	 
  
  * 网站SEO问题
    内容好，不作弊，更新及时，原创多，优质外链多,网站布局、加载速度、网站结够，网站服务器和解析等一定要稳定，站长提交
    1、网站的物理结构，URL层级的优化；
    2、网站的导航尽量采用文字导航，不建议使用图片和flash导航；
    3、网页的 Title、Description、keywords 进行关键词优化；
    4、网站的图片添加：ALT、Title 标签，并进行文字描述；
    5、网页的代码瘦身，对于 CSS、JS 采用调用外部文件；
    6、网页关键词的合理布局，以及关键词密度的控制；
    7、网站内部链接建设，导出链接数量不宜过多；
    8、网页尽量设置成：html 静态页面；
    9、网页内容提倡原创，适当伪原创；
    10、网站地图设置：Sitemap ;
    11、网页是否符合W3C标准。
	
  * 本地存储web storage与cookie区别
    localstorage保存数据生命周期长，容量大
	cookie 4kb
	cookie 会包含在每个http请求中向服务器发送，这样势必会导致多次发送重复数据
	cookie 网络传输时并未加密
  


  *  请指出document load和document ready的区别？
     共同点：这两种事件都代表的是页面文档加载时触发。
     异同点：
         ready 事件的触发，表示文档结构已经加载完成（不包含图片等非文字媒体文件）。
         onload 事件的触发，表示页面包含图片等文件在内的所有元素都加载完成。

  * 你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?
     Ie(Ie内核) 火狐（Gecko） 谷歌（webkit,Blink） opera(Presto),Safari(wbkit)

  * 不同浏览器兼容问题
    简单粗暴法
    *{ margin: 0; padding: 0; }
	浏览器 CSS 兼容前缀
     transform:rotate(7deg); // 统一标识语句
     -o-transform:rotate(7deg); // Opera
     -ms-transform:rotate(7deg); // IE
     -moz-transform:rotate(7deg); // Firefox
     -webkit-transform:rotate(7deg); // Chrome

html5shiv.js
解决 ie9 以下浏览器对 html5 新增标签不识别的问题。
<!--[if lt IE 9]>
<script type="text/javascript" src="https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js"></script>
<![endif]-->

respond.js
解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。
<script src="https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"></script>

picturefill.js
解决 IE 9 10 11 等浏览器不支持 <picture> 标签的问题
<script src="https://cdn.bootcss.com/picturefill/3.0.3/picturefill.min.js"></script>


  * <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
     X-UA-Compatible是自从IE8新加的一个设置，对于IE8以下的浏览器是不识别的。 通过在meta中设置X-UA-Compatible的值，可以指定网页的兼容性模式设置。 
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
   #以上代码IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame.

 * call和apply的区别
    BObject.call(thisAObj,arg1,arg2,arg3)
    BObject.apply(thisAObj,argArray)
    apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments);即A对象应用B对象的方法。
    call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2);即A对象调用B对象的方法
    从定义中可以看出，call和apply都是调用一个对象的一个方法，用另一个对象替换当前对象。而不同之处在于传递的参数，apply最多只能有两个参数――新this对象和一个数组argArray，如果arg不是数组则会报错TypeError；
call则可以传递多个参数，第一个参数和apply一样，是用来替换的对象，后边是参数列表。


*http常见错误码
200 OK请求成功。一般用于GET与POST请求
400 Bad Request客户端请求的语法错误，服务器无法理解
404 Not Found服务器无法根据客户端的请求找到资源(网页)。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面
405 Method Not Allowed客户端请求中的方法被禁止
500 Internal Server Error服务器内部错误，无法完成请求
501 Not Implemented服务器不支持请求的功能，无法完成请求
502 Bad Gateway充当网关或代理的服务器，从远端服务器接收到了一个无效的请求
504 Gateway Time-out充当网关或代理的服务器，未及时从远端服务器获取请求



*angular、vue、react工作原理及区别
angular MVC 依赖注入，双向绑定
vue  轻量级框架，双向绑定
react 单项数据流

angular框架
优点：
・模板功能强大丰富，并且是声明式的，自带了丰富的Angular指令；
・是一个比较完善的前端框架，包含服务，模板，数据双向绑定，模块化，路由，过滤器，依赖注入等所有功能；
・自定义指令，自定义指令后可以在项目中多次使用。
・ng模块化比较大胆的引入了Java的一些东西（依赖注入）
・双向绑定（脏检查机制）
缺点：
・验证功能错误信息显示比较薄弱，需要写很多模板标签
・ng提倡在控制器里面不要有操作DOM的代码，对于一些jQuery 插件的使用，如果想不破坏代码的整洁性，需要写一些directive去封装插件
・从1.0.X升级到1.2.X，貌似有比较大的调整，没有完美兼容低版本，升级之后可能会导致一个兼容性的BUG
・AngularJS 太笨重了，没有让用户选择一个轻量级的版本，当然1.2.X后，Angular也在做一些更改，比如把route，animate等模块独立出去，让用户自己去选择。
应用场景：在大型超大型web应用开发上。

vue框架（MVVM）
优点：
・轻量级框架，语法简单，学习成本低
・双向数据绑定
・组件化开发
・数据和结构的分离
・虚拟DOM
・运行速度快
・灵活渐进式框架
缺点：
・不支持IE8
・生态环境差，不如angular和react
・不适合偏大型的项目
应用场景：小型应用

react框架（MVC）
优点：
・jsx语法创建虚拟DOM，极速的渲染性能
・组件化开发，组件独立，方便重复使用
・单向数据流
・组件生命周期
・跨浏览器兼容性好
缺点：
・不适合单独做一个完整的框架
应用场景：个性化需求、中型应用


* VUE生命周期
     Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。
beforeCreate；created；beforeMount；mounted；beforeUpdate；updated；beforeDestroy；destroyed
每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行中、销毁。


* VUE主键间传值
一、父组件向子组件传递数据:props
    子组件部分:header.vue <template><div id="logo">{{logo}}</div></template><script>export default{props:['logo']}</script>
    父组件部分：app.vue <template><div id="app"><HeaderDiv :logo="logoMsg"></HeaderDiv></div></template>
	<script>
	 import HeaderDiv from './hearder'
	 export default{
	   name:'app',
	   data(){return{logoMsg:'hahaha'}},
	   components:{HeaderDiv}
	 }
	</script>
二、子组件向父组件传递数据
   使用了 $emit 来传 事件
三、子组件向子组件传递数据
为了便于开发，Vue 推出了一个状态管理工具 Vuex，可以很方便实现组件之间的参数传递

四、子组件向子组件传递数据（兄弟组件传值）
bus方式的组件间传值其实就是建立一个公共的js文件，专门用来传递消息
 


* 前端router实现形式
1、location.hash+hashchange事件
2、history.pushState()+popState事件


* H5页面在微信、webview常出现的bug
页面空白;字体变形;日期变NAN;键盘不回落;键盘回落页面空白...


* commonJS，amd, cmd是
CommonJS组织创造了一套js模块系统的规范。我们现在所说的CommonJS指的就是这个规范。node.js的模块系统，就是参照CommonJS规范实现的。
在兼容CommonJS的系统中，你可以使用JavaScript开发以下程序：
(1)、服务器端JavaScript应用程序
(2)、命令行工具
(3)、图形界面应用程序
(4)、混合应用程序（如，Titanium或Adobe AIR）
CommonJS定义的模块分为：{模块引用(require)} {模块定义(exports)} {模块标识(module)}
require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。

amd: ?
cmd：命令提示符



*前后端分离及前后端合并方案
（自己扯吧，形式那么多种多样按需选择）

* js开发模式，如何订阅发布模式
（不太了解这要答的是什么，就不扯了）
