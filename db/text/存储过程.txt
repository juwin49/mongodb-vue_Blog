存储过程如同一门程序设计语言，同样包含了数据类型、流程控制、输入和输出和它自己的函数库。

--------------------基本语法--------------------

一.创建存储过程create procedure sp_name()begin.........end

二.调用存储过程1.基本语法：call sp_name()注意：存储过程名称后面必须加括号，哪怕该存储过程没有参数传递

三.删除存储过程1.基本语法：drop procedure sp_name//

2.注意事项(1)不能在一个存储过程中删除另一个存储过程，只能调用另一个存储过程

四.其他常用命令

1.show procedure status显示数据库中所有存储的存储过程基本信息，包括所属数据库，存储过程名称，创建时间等

2.show create procedure sp_name显示某一个mysql存储过程的详细信息

--------------------数据类型及运算符--------------------一、基本数据类型：略

二、变量：

自定义变量：DECLARE   a INT ; SET a=100;    可用以下语句代替：DECLARE a INT DEFAULT 100;

变量分为用户变量和系统变量，系统变量又分为会话和全局级变量

用户变量：用户变量名一般以@开头，滥用用户变量会导致程序难以理解及管理

1、 在mysql客户端使用用户变量mysql> SELECT 'Hello World' into @x;mysql> SELECT @x;

mysql> SET @y='Goodbye Cruel World';mysql> select @y;

mysql> SET @z=1+2+3;mysql> select @z;

2、 在存储过程中使用用户变量

mysql> CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,' World');mysql> SET @greeting='Hello';mysql> CALL GreetWorld( );

3、 在存储过程间传递全局范围的用户变量mysql> CREATE PROCEDURE p1( )   SET @last_procedure='p1';mysql> CREATE PROCEDURE p2( ) SELECT CONCAT('Last procedure was ',@last_procedure);mysql> CALL p1( );mysql> CALL p2( );

三、运算符：1.算术运算符+     加   SET var1=2+2;       4-     减   SET var2=3-2;       1*      乘   SET var3=3*2;       6/     除   SET var4=10/3;      3.3333DIV   整除 SET var5=10 DIV 3; 3%     取模 SET var6=10%3 ;     1

2.比较运算符>            大于 1>2 False<            小于 2<1 False<=           小于等于 2<=2 True>=           大于等于 3>=2 TrueBETWEEN      在两值之间 5 BETWEEN 1 AND 10 TrueNOT BETWEEN 不在两值之间 5 NOT BETWEEN 1 AND 10 FalseIN           在集合中 5 IN (1,2,3,4) FalseNOT IN       不在集合中 5 NOT IN (1,2,3,4) True=             等于 2=3 False<>, !=       不等于 2<>3 False<=>          严格比较两个NULL值是否相等 NULL<=>NULL TrueLIKE          简单模式匹配 "Guy Harrison" LIKE "Guy%" TrueREGEXP       正则式匹配 "Guy Harrison" REGEXP "[Gg]reg" FalseIS NULL      为空 0 IS NULL FalseIS NOT NULL 不为空 0 IS NOT NULL True

3.逻辑运算符

4.位运算符|   或&   与<< 左移位>> 右移位~   非(单目运算，按位取反)

注释：

mysql存储过程可使用两种风格的注释双横杠：--

该风格一般用于单行注释c风格：/* 注释内容 */ 一般用于多行注释

--------------------流程控制--------------------一、顺序结构二、分支结构ifcase

三、循环结构for循环while循环loop循环repeat until循环

注：区块定义，常用begin......end;也可以给区块起别名，如：lable:begin...........end lable;可以用leave lable;跳出区块，执行区块以后的代码

begin和end如同C语言中的{ 和 }。

--------------------输入和输出--------------------

mysql存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUTCreate procedure|function([[IN |OUT |INOUT ] 参数名 数据类形...])

IN 输入参数表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值

OUT 输出参数该值可在存储过程内部被改变，并可返回

INOUT 输入输出参数调用时指定，并且可被改变和返回

IN参数例子：CREATE PROCEDURE sp_demo_in_parameter(IN p_in INT)BEGINSELECT p_in; --查询输入参数SET p_in=2; --修改select p_in;--查看修改后的值END;

执行结果:mysql> set @p_in=1mysql> call sp_demo_in_parameter(@p_in)略mysql> select @p_in;略以上可以看出，p_in虽然在存储过程中被修改，但并不影响@p_id的值

OUT参数例子创建:mysql> CREATE PROCEDURE sp_demo_out_parameter(OUT p_out INT)BEGINSELECT p_out;/*查看输出参数*/SET p_out=2;/*修改参数值*/SELECT p_out;/*看看有否变化*/END;

执行结果:mysql> SET @p_out=1mysql> CALL sp_demo_out_parameter(@p_out)略

mysql> SELECT @p_out;略

INOUT参数例子：mysql> CREATE PROCEDURE sp_demo_inout_parameter(INOUT p_inout INT)BEGINSELECT p_inout;SET p_inout=2;SELECT p_inout;END;

执行结果：set @p_inout=1call sp_demo_inout_parameter(@p_inout) //略select @p_inout;略